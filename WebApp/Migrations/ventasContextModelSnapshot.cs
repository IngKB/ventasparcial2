// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ventas.infrastructure;

namespace WebApp.Migrations
{
    [DbContext(typeof(ventasContext))]
    partial class ventasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("ventas.domain.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Costo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Producto");
                });

            modelBuilder.Entity("ventas.domain.ProductoCompuesto", b =>
                {
                    b.HasBaseType("ventas.domain.Producto");

                    b.HasDiscriminator().HasValue("ProductoCompuesto");
                });

            modelBuilder.Entity("ventas.domain.ProductoSimple", b =>
                {
                    b.HasBaseType("ventas.domain.Producto");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("ProductoSimple");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "001",
                            Costo = 500m,
                            Nombre = "Pan",
                            Precio = 0m,
                            Cantidad = 10
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "002",
                            Costo = 1000m,
                            Nombre = "Salchicha",
                            Precio = 0m,
                            Cantidad = 10
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "003",
                            Costo = 1000m,
                            Nombre = "Cocacola",
                            Precio = 3000m,
                            Cantidad = 10
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
